@prefix : <http://purl.org/spar/pwo/> .
@prefix cflow: <http://www.ontologydesignpatterns.org/cp/owl/controlflow.owl#> .
@prefix cpannotationschema: <http://www.ontologydesignpatterns.org/schemas/cpannotationschema.owl#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix error: <http://www.essepuntato.it/2009/10/error/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix owl2: <http://www.w3.org/2006/12/owl2#> .
@prefix owlapi: <http://www.semanticweb.org/owlapi#> .
@prefix parameter: <http://www.ontologydesignpatterns.org/cp/owl/parameter.owl#> .
@prefix part: <http://www.ontologydesignpatterns.org/cp/owl/participation.owl#> .
@prefix plan: <http://www.ontologydesignpatterns.org/cp/owl/basicplan.owl#> .
@prefix plandesc: <http://www.ontologydesignpatterns.org/cp/owl/basicplandescription.owl#> .
@prefix planex: <http://www.ontologydesignpatterns.org/cp/owl/basicplanexecution.owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sequence: <http://www.ontologydesignpatterns.org/cp/owl/sequence.owl#> .
@prefix sit: <http://www.ontologydesignpatterns.org/cp/owl/situation.owl#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrlb: <http://www.w3.org/2003/11/swrlb#> .
@prefix swrlx: <http://www.w3.org/2003/11/swrlx#> .
@prefix taskex: <http://www.ontologydesignpatterns.org/cp/owl/taskexecution.owl#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix timeint: <http://www.ontologydesignpatterns.org/cp/owl/timeinterval.owl#> .
@prefix tisit: <http://www.ontologydesignpatterns.org/cp/owl/timeindexedsituation.owl#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

dc:contributor a owl:AnnotationProperty .

dc:creator a owl:AnnotationProperty .

dc:date a owl:AnnotationProperty .

dc:description a owl:AnnotationProperty .

dc:rights a owl:AnnotationProperty .

dc:title a owl:AnnotationProperty .

<http://purl.org/spar/pwo> a owl:Ontology ;
    dc:creator "Aldo Gangemi"^^xsd:string,
        "David Shotton"^^xsd:string,
        "Silvio Peroni"^^xsd:string ;
    dc:date "2017-06-01"^^xsd:string ;
    dc:description :pwo.png,
        "The Publishing Workflow Ontology (PWO) is a simple ontology written in OWL 2 DL for the characterization of the main stages in the workflow associated with the publication of a document (e.g. being written, under review, XML capture, page design, publication to the Web)."@en ;
    dc:rights "This work is distributed under a Creative Commons Attribution License (http://creativecommons.org/licenses/by/3.0/)."@en ;
    dc:title "The Publishing Workflow Ontology (PWO)"^^xsd:string ;
    rdfs:comment "The Publishing Workflow Ontology (PWO) is an ontology for describing the workflow associated with the publication of a document.  It forms part of SPAR, a suite of Semantic Publishing and Referencing Ontologies."@en ;
    owl:imports <http://www.essepuntato.it/2009/10/error>,
        <http://www.ontologydesignpatterns.org/cp/owl/basicplan.owl>,
        <http://www.ontologydesignpatterns.org/cp/owl/controlflow.owl>,
        <http://www.ontologydesignpatterns.org/cp/owl/participation.owl>,
        <http://www.ontologydesignpatterns.org/cp/owl/sequence.owl>,
        <http://www.ontologydesignpatterns.org/cp/owl/timeindexedsituation.owl>,
        <http://www.ontologydesignpatterns.org/cp/owl/timeinterval.owl>,
        <http://www.w3.org/2006/time> ;
    owl:priorVersion <https://svn.code.sf.net/p/sempublishing/code/PWO/2016-03-14_pwo-2_3.owl> ;
    owl:versionIRI <http://purl.org/spar/pwo/2017-06-01> ;
    owl:versionInfo "2.4"^^xsd:string .

:hasNextStep a owl:ObjectProperty ;
    rdfs:label "has next step"@en ;
    rdfs:comment "A property linking a step in a workflow with the step that directly follows it."@en ;
    rdfs:domain :Step ;
    rdfs:range :Step ;
    rdfs:subPropertyOf sequence:directlyPrecedes ;
    owl:inverseOf :hasPreviousStep .

:isNeededBy a owl:ObjectProperty ;
    rdfs:label "is needed by"@en ;
    rdfs:comment "The property linking a thing required to undertake a workflow step or an event (e.g. an action executing a workflow step) to the step/event itself."@en ;
    owl:inverseOf :needs .

:isProducedBy a owl:ObjectProperty ;
    rdfs:label "is produced by"@en ;
    rdfs:comment "The property linking something to the workflow step or an event (e.g. an action executing a workflow step) that produces, creates or results in that thing."@en ;
    owl:inverseOf :produces .

part:Object a owl:Class .

part:hasParticipant a owl:ObjectProperty .

part:isParticipantIn a owl:ObjectProperty .

sit:Situation a owl:Class .

sit:isSettingFor a owl:ObjectProperty .

tisit:atTime a owl:ObjectProperty ;
    rdfs:label "at time"@en ;
    rdfs:comment "A step is performed within a time interval."@en .

tisit:forEntity a owl:ObjectProperty .

tisit:hasTimeIndexedSetting a owl:ObjectProperty .

timeint:hasIntervalDate a owl:DatatypeProperty .

owlapi:nodeID a owl:AnnotationProperty .

rdfs:comment a owl:AnnotationProperty .

rdfs:label a owl:AnnotationProperty .

owl:versionInfo a owl:AnnotationProperty .

:WorkflowExecution a owl:Class ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :involvesAction ;
            owl:someValuesFrom [ a owl:Class ;
                    owl:intersectionOf ( :Action [ a owl:Restriction ;
                                owl:onProperty taskex:executesTask ;
                                owl:someValuesFrom :Step ] ) ] ],
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :Workflow ],
        planex:PlanExecution,
        tisit:TimeIndexedSituation .

:happened a owl:ObjectProperty ;
    rdfs:label "happened"@en ;
    rdfs:comment "It allows one to link an event to the interval when it happened."@en ;
    rdfs:domain part:Event ;
    rdfs:range timeint:TimeInterval ;
    owl:inverseOf :isIntervalFor .

:hasFirstStep a owl:ObjectProperty ;
    rdfs:label "has first step"@en ;
    rdfs:comment "A workflow that starts with a particular step."@en ;
    rdfs:range [ a owl:Class ;
            owl:complementOf [ a owl:Restriction ;
                    owl:onProperty :hasPreviousStep ;
                    owl:someValuesFrom :Step ] ] ;
    rdfs:subPropertyOf :hasStep .

:involvesAction a owl:ObjectProperty ;
    rdfs:label "involves action"@en ;
    rdfs:comment "The property linking a particular execution of a workflow to an action."@en ;
    rdfs:domain :WorkflowExecution ;
    rdfs:range :Action ;
    owl:inverseOf :isActionInvolvedIn ;
    owl:propertyChainAxiom ( :executes :hasStep taskex:isExecutedIn ) .

:isActionInvolvedIn a owl:ObjectProperty ;
    rdfs:label "is action involved in"@en ;
    rdfs:comment "The property linking an event to a particular execution of a workflow description."@en ;
    owl:propertyChainAxiom ( taskex:executesTask :isStepOf :isExecutedBy ) .

:isIntervalFor a owl:ObjectProperty ;
    rdfs:label "is interval for"@en ;
    rdfs:comment "It allows one to link an interval describing when an event happened to the related event."@en .

error:hasError a owl:DatatypeProperty .

plandesc:definesTask a owl:ObjectProperty .

planex:PlanExecution a owl:Class .

sequence:directlyFollows a owl:ObjectProperty .

sequence:directlyPrecedes a owl:ObjectProperty .

sequence:precedes a owl:ObjectProperty .

taskex:Action a owl:Class .

<http://www.ontologydesignpatterns.org/cp/owl/taskrole.owl#Task> a owl:Class .

tisit:TimeIndexedSituation a owl:Class .

:executes a owl:ObjectProperty ;
    rdfs:label "executes"@en ;
    rdfs:comment "This property allows to link a workflow execution to the related workflow description."@en ;
    rdfs:subPropertyOf plan:satisfies ;
    owl:inverseOf :isExecutedBy .

:hasPreviousStep a owl:ObjectProperty ;
    rdfs:label "has previous step"@en ;
    rdfs:comment "A property linking a step in a workflow with the step that directly precedes it."@en ;
    rdfs:subPropertyOf sequence:directlyFollows .

:hasStep a owl:ObjectProperty ;
    rdfs:label "has step"@en ;
    rdfs:comment "The property linking a workflow to a component step."@en ;
    rdfs:domain :Workflow ;
    rdfs:range :Step ;
    rdfs:subPropertyOf plandesc:definesTask ;
    owl:inverseOf :isStepOf .

:isExecutedBy a owl:ObjectProperty ;
    rdfs:label "is executed by" ;
    rdfs:comment "This property allows to link a workflow description to the related workflow execution." ;
    rdfs:subPropertyOf plan:isSatisfiedBy .

:isStepOf a owl:FunctionalProperty,
        owl:ObjectProperty ;
    rdfs:label "is step of"@en ;
    rdfs:comment "The property linking a step in a workflow to the workflow of which it is a component."@en ;
    rdfs:subPropertyOf plandesc:isTaskDefinedIn .

:needs a owl:ObjectProperty ;
    rdfs:label "needs"@en ;
    rdfs:comment "The property linking a workflow step or an event (e.g. an action executing a workflow step) to anything required to undertake that step/event."@en ;
    rdfs:domain [ a owl:Class ;
            owl:unionOf ( :Step part:Event ) ] .

:produces a owl:ObjectProperty ;
    rdfs:label "produces"@en ;
    rdfs:comment "The property linking a workflow step or an event (e.g. an action executing a workflow step) to the thing that the step/event produces, creates or results in."@en ;
    rdfs:domain [ a owl:Class ;
            owl:unionOf ( :Step part:Event ) ] .

plandesc:isTaskDefinedIn a owl:ObjectProperty .

taskex:executesTask a owl:ObjectProperty .

taskex:isExecutedIn a owl:ObjectProperty .

timeint:TimeInterval a owl:Class .

<urn:swrl#r> a swrl:Variable .

:Action a owl:Class ;
    rdfs:label "action" ;
    rdfs:comment "An event with at least one agent that is participant in it and that is linked to a workflow execution and to a step of the related workflow description." ;
    rdfs:subClassOf [ a owl:Class ;
            owl:intersectionOf ( planex:Action taskex:Action ) ],
        [ a owl:Restriction ;
            owl:onProperty :happened ;
            owl:someValuesFrom timeint:TimeInterval ] .

:Workflow a owl:Class ;
    rdfs:label "workflow"@en ;
    rdfs:comment "A sequence of connected steps, representing a sequence of publishing operations undertaken by agents. A workflow may be seen as an abstract model of real work."@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:onProperty :hasFirstStep ;
            owl:someValuesFrom :Step ],
        plandesc:Plan .

part:Event a owl:Class .

<urn:swrl#sj> a swrl:Variable .

<urn:swrl#si> a swrl:Variable .

:Step a owl:Class ;
    rdfs:label "step"@en ;
    rdfs:comment "An atomic unit of a workflow, that may be characterized by a starting time and an ending time, and may be associated with one or more events.  A workflow step usually involves some input information, material or energy needed to complete the step, and some output information, material or energy produced by that step.  In the case of a publishing workflow, a step typically results in the creation of a publication entity, usually by the modification of another pre-existing publication entity, e.g. the creation of an edited paper from a rough draft, or of an HTML representation from an XML mark-up."@en ;
    rdfs:subClassOf [ a owl:Restriction ;
            owl:allValuesFrom :Workflow ;
            owl:onProperty plandesc:isTaskDefinedIn ],
        [ a owl:Restriction ;
            owl:allValuesFrom :Action ;
            owl:onProperty taskex:isExecutedIn ],
        [ a owl:Restriction ;
            owl:onClass time:DurationDescription ;
            owl:onProperty parameter:hasParameter ;
            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ],
        <http://www.ontologydesignpatterns.org/cp/owl/taskrole.owl#Task> .

[] a swrl:Imp ;
    swrl:body [ a swrl:AtomList ;
            rdf:first [ a swrl:ClassAtom ;
                    swrl:argument1 <urn:swrl#si> ;
                    swrl:classPredicate :Step ] ;
            rdf:rest [ a swrl:AtomList ;
                    rdf:first [ a swrl:ClassAtom ;
                            swrl:argument1 <urn:swrl#sj> ;
                            swrl:classPredicate :Step ] ;
                    rdf:rest [ a swrl:AtomList ;
                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                    swrl:argument1 <urn:swrl#si> ;
                                    swrl:argument2 <urn:swrl#r> ;
                                    swrl:propertyPredicate :needs ] ;
                            rdf:rest [ a swrl:AtomList ;
                                    rdf:first [ a swrl:IndividualPropertyAtom ;
                                            swrl:argument1 <urn:swrl#sj> ;
                                            swrl:argument2 <urn:swrl#r> ;
                                            swrl:propertyPredicate :produces ] ;
                                    rdf:rest [ a swrl:AtomList ;
                                            rdf:first [ a swrl:IndividualPropertyAtom ;
                                                    swrl:argument1 <urn:swrl#si> ;
                                                    swrl:argument2 <urn:swrl#sj> ;
                                                    swrl:propertyPredicate sequence:precedes ] ;
                                            rdf:rest () ] ] ] ] ] ;
    swrl:head [ a swrl:AtomList ;
            rdf:first [ a swrl:DatavaluedPropertyAtom ;
                    swrl:argument1 <urn:swrl#si> ;
                    swrl:argument2 "A step cannot need a resource that will be produced by a following step"^^xsd:string ;
                    swrl:propertyPredicate error:hasError ] ;
            rdf:rest () ] .

